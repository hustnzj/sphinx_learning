Build your first project
==========================

在本教程中，您将使用 Sphinx 构建一个简单的文档项目，并在浏览器中以 HTML 形式查看它。该项目将包括叙述性手写文档以及自动生成的 API 文档。

本教程面向愿意学习项目创建和结构基础知识的 Sphinx 新手。您将创建一个虚构的软件库来生成随机食物食谱，该食谱将在整个过程中作为指南，目的是正确记录它。

要展示 Sphinx 的代码文档功能，您将使用 Python，它还支持自动文档生成。

Sphinx 本身支持其他几种语言的手动代码文档，但它们需要自动代码文档的扩展，例如 Breathe。

要按照说明进行操作，您将需要可以访问类似 Linux 的命令行并对其工作原理有基本了解，以及用于开发的有效的 Python 安装，因为您将使用 Python 虚拟环境来创建项目。


Getting started
_______________
Setting up your project and development environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Appendix: Deploying a Sphinx project online
_____________________________________________
.. note:: 
   这里我只考虑 GitHub Pages


Publishing your documentation sources
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GitHub
******

The quickest way to upload an existing project to GitHub is to:

1. Sign up for a GitHub account.
2. Create a new repository.
3. Put the README.rst, the makefiles under the docs directory, and anything else under docs/source.
4. 在本地创建 git 仓库.
5. 创建 .gitignore，根据实际情况填写要禁止跟踪的内容。
6. 将 main 分支推送到 GitHub.

.. note:: 

   Make sure you don’t upload the docs/build directory, as it contains the output generated by Sphinx and it will change every time you change the sources, complicating your workflow.（也就是说本地的 build目录不推送到远程。在远程生成 build目录。要做到这一点，只需要在 .gitignore 中增加 ``build``）


Publishing your HTML documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GitHub
******
GitHub Pages requires you to publish your sources on GitHub. After that, you will need an automated process that performs the make html step every time the sources change. That can be achieved using GitHub Actions.

After you have published your sources on GitHub, create a file named .github/workflows/sphinx.yml in your repository with the following contents:

.. code-block:: yaml

   name: "Sphinx: Render docs"

   on: push 
   jobs:
   build:
     runs-on: ubuntu-latest
     permissions:
       contents: write
     steps:
     - uses: actions/checkout@v4
     - name: Set up Python
       uses: actions/setup-python@v2
       with:
         python-version: '3.x'
     - name: Install dependencies
       run: |
         python -m pip install --upgrade pip
         pip install -r docs/requirements.txt
     - name: Build HTML
       run: sphinx-build -b html docs/source docs/build/html
     - name: Upload artifacts
       uses: actions/upload-artifact@v4
       with:
         name: html-docs
         path: docs/build/html/
     - name: Deploy
       uses: peaceiris/actions-gh-pages@v3
       if: github.ref == 'refs/heads/main'
       with:
         github_token: ${{ secrets.GITHUB_TOKEN }}
         publish_dir: docs/build/html 

这里包含一个 GitHub Actions 工作流程，其中的单个作业包含四个步骤：

1. 检查代码。
2. 使用 Sphinx 构建 HTML 文档。
3. 将HTML 输出附加到 GitHub Actions 作业，以便于检查。
4. 如果更改发生在默认分支上，则生成 docs/build/html 的内容并将其推送到 gh-pages 分支。
5. 接下来，您需要指定 make html 步骤成功的依赖项。为此，创建一个文件 docs/requirements.txt 并添加以下内容：

.. code-block:: text 
   
   furo==2024.5.6

6. 创建一个干净的 gh-pages 分支并推送到远程。此分支专门用来存放推送 main 分支时自动生成的 HTML 文档，命令如下：

.. code-block:: bash

   # 创建一个新的孤立分支 gh-pages
   git checkout --orphan gh-pages
 
   # 删除所有文件（清空 gh-pages 分支）
   git rm -rf .
 
   # 创建一个空提交，初始化 gh-pages 分支
   git commit --allow-empty -m "Initializing gh-pages branch"
 
   # 将 gh-pages 分支推送到远程仓库
   git push origin gh-pages
 
   # 切换回 main 分支
   git checkout main

7. 接下来在 main 分支上进行了任何修改，commit 后 push 到远程，main所做的修改就会自动生成 HTML 文档并存放到远程的 gh-pages 分支。
8. 现在进入项目的设置页面，就可以看到: ``Your site is live at https://hustnzj.github.io/sphinx_learning/``

